import{M as r}from"./MyProject-1e418308.js";import{I as t}from"./IFrameCell-012f5f94.js";import{M as o}from"./MarkdownCell-711da591.js";import{m as a,z as i,A as s,C as l,B as e,u as n}from"./index-d06a3c0e.js";import"./tag-5b448513.js";/* empty css             */const u=`## Introduction\r
\r
Undergraduate course project that utilizes genetic algorithm to visualize the maximum value within a function interval on a web page.\r
\r
## Background\r
\r
This might be one of the earliest projects by xyqlx that showcased visualization on a web page and was shared on a public code repository.\r
\r
At that time, xyqlx simply used the code repository as a static web hosting service, so only the "dist" folder of Vue was uploaded. The source code in the GitHub repository is retrieved from an archived folder and only contains the key code.\r
\r
By the way, xyqlx has been a Vue developer for four years now :)\r
\r
## Usage\r
\r
There are two aspects that can be modified:\r
\r
* Problem definition: including the function expression f(x) and the interval [a, b].\r
* Genetic algorithm parameters: including population size, chromosome length, generations, crossover count, crossover probability, mutation probability, and fitness offset.\r
\r
The "Max Value" text box is actually a read-only text box used to display the current maximum value.\r
\r
The two charts on the right are relatively easy to understand. The chart on the left displays the function graph within the domain, while the chart on the right displays the iteration results.\r
\r
The "Compute" button below is actually redundant because as soon as the parameters are modified, the computation will start automatically.\r
\r
## Summary of the Experiment Report\r
\r
Fortunately, xyqlx found the undergraduate experiment report, and here are some additional excerpts.\r
\r
### Objective of the Experiment\r
\r
To familiarize and master the basic ideas and methods of genetic algorithms, cultivate students' basic skills in using genetic algorithms to solve problems, and understand the basic ideas and methods of other branches of evolutionary computation.\r
\r
### Algorithm Process\r
\r
The basic process of a simple genetic algorithm is as follows:\r
\r
1. Initialize the population: randomly generate an initial population consisting of feature strings of a fixed length.\r
2. Calculate the fitness value of each individual in the population.\r
3. Select individuals to enter the next generation based on a rule determined by their fitness values, i.e., selection operator.\r
4. Perform crossover operator on individuals in the mating pool with a probability of Pc.\r
5. Perform mutation operator on all new individuals generated by the crossover operator with a probability of Pm.\r
6. If a certain stopping condition is not met, go to step 2; otherwise, proceed to the next step.\r
7. Output the chromosome with the best fitness value in the population as the satisfactory or optimal solution to the problem.\r
\r
### Experiment Content\r
\r
Write a program to use a genetic algorithm to find the maximum value of the function f(x) = x*sin(10π+x)+1.0 in the interval [-1, 2].\r
\r
### Experiment Details\r
\r
| Attribute | Description |\r
|---|---|\r
| Encoding and Decoding | Binary encoding and decoding based on equal divisions of the interval. |\r
| Fitness Function | Function value + offset value (to ensure positive fitness values). |\r
| Selection Method | Proportional selection. |\r
| Crossover | Multi-point crossover. |\r
| Mutation | Fixed probability mutation. |\r
| Termination Condition | Reached the maximum number of generations. |\r
\r
### Questions for Consideration\r
\r
1. What is premature convergence and slow termination? What are the causes of these situations?\r
2. Does your program have any areas for improvement? How can it be improved?\r
\r
Answers:\r
\r
1. Premature convergence refers to a situation where all values in the population get stuck in a local optimum and cannot find a better solution. The causes of premature convergence are mainly a small population size, a small mutation probability, and excessive selection pressure. Slow termination refers to a situation where after a certain number of generations, most of the population has converged but has not stabilized at the global optimum.\r
2. An improvement could be to add extension interfaces for changing the selection operator, crossover operator, and mutation operator.\r
\r
## Issue\r
\r
I tried it and found a bug. There is a problem with the display of the function graph. It may be that when recalculating the function values, the original data is not completely refreshed.\r
`,c=`## 介绍\r
\r
本科课设，使用遗传算法求解函数区间内最大值的可视化网页。\r
\r
## 背景\r
\r
可能是xyq最早的用网页可视化的方式展示项目、并且发到公开代码仓库的作品。\r
\r
当时xyq只是把代码仓库当做静态网页托管服务使用，所以甚至只上传了vue的dist文件夹。现在GitHub仓库中的源代码是从存档文件夹中翻出来的，而且只包含了关键代码。\r
\r
这么说来，我也是4年老Vue开发者了（喜）\r
\r
## 使用方法\r
\r
可以修改包括两个方面：\r
\r
* 问题定义：包括函数表达式f(x)以及区间[a,b]\r
* 遗传算法参数：包括种群数量、染色体长度、遗传代数、交叉数、交叉概率、变异概率、适应度偏移量\r
\r
最大值文本框其实是一个只读的文本框，用于显示当前最大值。\r
\r
右面的两张图表就比较好理解了，左边的图显示定义域内的函数图象，右边的图显示迭代结果。\r
\r
下面的“计算”按钮其实是多余的，因为只要修改了参数，就会自动开始计算。\r
\r
## 实验报告摘要\r
\r
很幸运xyq找到了自己保存的本科实验报告，这里摘录一些补充信息\r
\r
### 实验目的\r
\r
熟悉和掌握遗传算法的基本思想和基本方法，通过实验培养学生利用遗传算法进行问题求解的基本技能，并且了解进化计算其他分支的基本思想和基本方法\r
\r
### 算法过程\r
\r
简单遗传算法的基本流程如下：\r
\r
1. 初始化群体：随机产生一个由确定长度的特征串组成的初始群体\r
1. 计算群体上每个个体的适应度值\r
1. 按由个体适应度值所决定的某个规则选择将进入下一代的个体，也就是选择算子操作。\r
1. 按概率 Pc 对配对池中的个体进行交叉算子操作。\r
1. 按概率 Pm 对交叉算子产生的所有新个体进行变异操作。\r
1. 若没有满足某种停止条件，则转步骤2，否则进入下一步。\r
1. 输出群体中适应度值最优的染色体作为问题的满意解或最优解。\r
\r
### 实验内容\r
\r
编写程序用遗传算法求解函数 f(x)=x*sin(10π+x)+1.0 在区间[-1，2]的最大值。\r
\r
### 实验细节\r
\r
| 属性 | 说明 |\r
|---|---|\r
| 编码和解码 | 按照区间等分的二进制编解码 |\r
| 适应度函数 | 函数值 + 偏移值（确保适应度为正数）|\r
| 算子选择方法 | 比例选择法 |\r
| 交叉 | 多点交叉 |\r
| 变异 | 固定概率变异 |\r
| 算法结束条件 | 达到最大代数 |\r
\r
### 思考问题\r
\r
1. 什么是过早收敛和过慢结束？造成上述状况的原因有哪些？\r
2. 你的程序有没有要改进之处？如何改进？\r
\r
回答：\r
\r
1. 过早收敛是指种群中的所有值陷入局部最优解，不能找到更优的解的情况，造成过早收敛的原因主要是种群数量、变异概率过小、选择压力太大。过慢结束是指一定代数之后，种群大部分已经收敛，但是没有稳定在全局最优值。\r
2. 可以增加用于更换选择算子、交叉算子、变异算子的扩展接口。\r
\r
## 问题\r
\r
试了下其实是有BUG的，函数图象的显示有问题，可能是在重新计算函数值的时候，没有完全刷新原来的数据\r
`,x=a({__name:"GeneticAlgorithmFunction",setup(h){return(d,m)=>(i(),s(r,{project:"genetic_algorithm_function"},{default:l(()=>[e(t,{src:"https://xyqlx.github.io/genetic_algorithm_function/","white-background":!0,scale:1,"transform-scale":.8}),e(o,{en:n(u),zh:n(c)},null,8,["en","zh"])]),_:1}))}});export{x as default};
